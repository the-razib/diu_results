import 'package:flutter/material.dart';

class StudentInputScreen extends StatelessWidget {
  final TextEditingController studentIdController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 2,
      child: Scaffold(
        appBar: _buildAppBar(),
        body: TabBarView(
          children: [
            ResultScreenTab(studentIdController: studentIdController),
            const CGPACalculator(),
          ],
        ),
      ),
    );
  }

  AppBar _buildAppBar() {
    return AppBar(
      toolbarHeight: 18,
      bottom: const TabBar(
        indicatorWeight: 4.0,
        tabs: [
          Tab(
            icon: Icon(Icons.school, size: 32),
            text: 'Results',
          ),
          Tab(
            icon: Icon(Icons.calculate, size: 32),
            text: 'CGPA Calculator',
          ),
        ],
      ),
    );
  }
}

// ---------------- ResultScreenTab ----------------

class ResultScreenTab extends StatelessWidget {
  final TextEditingController studentIdController;

  const ResultScreenTab({
    Key? key,
    required this.studentIdController,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView(
      child: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 24.0, vertical: 32.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            const Icon(Icons.school, size: 100, color: Colors.blueAccent),
            const SizedBox(height: 16),
            const Text(
              'Welcome to the DIU Result Portal!',
              textAlign: TextAlign.center,
              style: TextStyle(
                fontSize: 22,
                fontWeight: FontWeight.bold,
                color: Colors.blueGrey,
              ),
            ),
            const SizedBox(height: 24),
            _buildStudentIdInput(),
            const SizedBox(height: 24),
            _buildViewResultsButton(context),
          ],
        ),
      ),
    );
  }

  Widget _buildStudentIdInput() {
    return TextField(
      controller: studentIdController,
      decoration: const InputDecoration(
        labelText: 'Enter Student ID',
        hintText: 'e.g., 201-15-3637',
        prefixIcon: Icon(Icons.person, color: Colors.black54),
        border: OutlineInputBorder(),
      ),
      keyboardType: TextInputType.text,
    );
  }

  Widget _buildViewResultsButton(BuildContext context) {
    return ElevatedButton(
      onPressed: () {
        final studentId = studentIdController.text.trim();
        if (studentId.isNotEmpty) {
          Navigator.pushNamed(context, '/results', arguments: studentId);
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Please enter a valid Student ID')),
          );
        }
      },
      child: const Text(
        'View Results',
        style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
      ),
    );
  }
}

// ---------------- CGPACalculator ----------------

class CGPACalculator extends StatefulWidget {
  const CGPACalculator({Key? key}) : super(key: key);

  @override
  State<CGPACalculator> createState() => _CGPACalculatorState();
}

class _CGPACalculatorState extends State<CGPACalculator> {
  final List<Map<String, dynamic>> subjects = [
    {'name': '', 'grade': null, 'credit': 0},
    {'name': '', 'grade': null, 'credit': 0},
  ];

  void addSubject() {
    setState(() {
      subjects.add({'name': '', 'grade': null, 'credit': 0});
    });
  }

  void removeSubject(int index) {
    setState(() {
      subjects.removeAt(index);
    });
  }

  double calculateCGPA() {
    double totalCredits = 0;
    double totalPoints = 0;

    for (var subject in subjects) {
      final gradePoint = subject['grade'] ?? 0.0;
      final credit = subject['credit'] ?? 0.0;
      totalCredits += credit;
      totalPoints += gradePoint * credit;
    }

    return totalCredits == 0 ? 0.0 : totalPoints / totalCredits;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          _buildCGPABanner(),
          _buildSubjectList(),
          _buildAddSubjectButton(),
        ],
      ),
    );
  }

  Widget _buildCGPABanner() {
    return Container(
      width: double.infinity,
      padding: const EdgeInsets.all(16.0),
      margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(10),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.2),
            spreadRadius: 3,
            blurRadius: 5,
            offset: const Offset(0, 3),
          ),
        ],
      ),
      child: Text(
        'CGPA: ${calculateCGPA().toStringAsFixed(2)}',
        style: const TextStyle(
          fontSize: 24,
          fontWeight: FontWeight.bold,
          color: Colors.blueAccent,
        ),
        textAlign: TextAlign.center,
      ),
    );
  }

  Widget _buildSubjectList() {
    return Expanded(
      child: ListView.builder(
        itemCount: subjects.length,
        itemBuilder: (context, index) {
          return SubjectRow(
            index: index,
            subject: subjects[index],
            onRemove: removeSubject,
            onUpdate: (updatedSubject) {
              setState(() {
                subjects[index] = updatedSubject;
              });
            },
          );
        },
      ),
    );
  }

  Widget _buildAddSubjectButton() {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: ElevatedButton.icon(
        onPressed: addSubject,
        icon: const Icon(Icons.add, color: Colors.white, size: 24),
        label: const Text(
          'Add Subject',
          style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
        ),
      ),
    );
  }
}

// ---------------- SubjectRow ----------------

class SubjectRow extends StatelessWidget {
  final int index;
  final Map<String, dynamic> subject;
  final void Function(int) onRemove;
  final void Function(Map<String, dynamic>) onUpdate;

  const SubjectRow({
    Key? key,
    required this.index,
    required this.subject,
    required this.onRemove,
    required this.onUpdate,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      elevation: 3,
      child: Padding(
        padding: const EdgeInsets.all(12.0),
        child: Row(
          children: [
            Expanded(flex: 3, child: _buildSubjectNameField()),
            const SizedBox(width: 8),
            Expanded(flex: 2, child: _buildGradeDropdown()),
            const SizedBox(width: 8),
            Expanded(flex: 2, child: _buildCreditField()),
            const SizedBox(width: 8),
            _buildDeleteButton(),
          ],
        ),
      ),
    );
  }

  Widget _buildSubjectNameField() {
    return TextFormField(
      initialValue: subject['name'],
      decoration: InputDecoration(
        labelText: 'Subject ${index + 1}',
        hintText: 'Name',
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
      onChanged: (value) {
        subject['name'] = value;
        onUpdate(subject);
      },
    );
  }

  Widget _buildGradeDropdown() {
    const gradeOptions = [
      {'label': 'A+', 'point': 4.0},
      {'label': 'A', 'point': 3.75},
      {'label': 'A-', 'point': 3.50},
      {'label': 'B+', 'point': 3.25},
      {'label': 'B', 'point': 3.00},
      {'label': 'B-', 'point': 2.75},
      {'label': 'C+', 'point': 2.50},
      {'label': 'C', 'point': 2.25},
      {'label': 'D', 'point': 2.00},
      {'label': 'F', 'point': 0.00},
    ];

    return DropdownButtonFormField(
      value: subject['grade'],
      decoration: InputDecoration(
        labelText: 'Grade',
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
      items: gradeOptions
          .map(
            (grade) => DropdownMenuItem(
          value: grade['point'],
child: Text(grade['label'] as String),        ),
      )
          .toList(),
      onChanged: (value) {
        subject['grade'] = value;
        onUpdate(subject);
      },
    );
  }

  Widget _buildCreditField() {
    return TextFormField(
      initialValue: subject['credit'].toString(),
      keyboardType: TextInputType.number,
      decoration: InputDecoration(
        labelText: 'Credit',
        hintText: '0.0',
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
      onChanged: (value) {
        subject['credit'] = double.tryParse(value) ?? 0.0;
        onUpdate(subject);
      },
    );
  }

  Widget _buildDeleteButton() {
    return IconButton(
      onPressed: () => onRemove(index),
      icon: const Icon(Icons.delete, color: Colors.redAccent),
    );
  }
}
